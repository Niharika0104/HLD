There are two types of architectures.They are monolithic and microservices.

1.Monolithic:Its is a legacy way of designing systems.In this the entire code of the system is put in the single 
folder.
There are instances where the code can become tightly coupled because of this.

Disadvantages:
1.This can lead to a tightly coupled architecture.
2.Scalibility becomes difficult as the code is tightly coupled and a single change in line can cause re-deployment 
of the entire application.
3.CI jobs may take a lof of time.It would also take a lot of time to load the code into our IDE's.

Microservices:
It's all about breaking an entire system into different parts (these are referred to as services) and these will 
communicate with each other if required to get the job done.Now these services can be scaled and deployed 
indivually.These leads to a loosely coupled architecture.

Disadvantates of Microservices:
1.If the system is not decomposed properly then it can lead to a tightly coupled architecture.
2.Monitoring becomes difficult:If the change in one services causes breakage in other services,then it woould become 
a little bit tedious to know which service has caused the code breakage.
3.Transaction Management:Every service might have its own db.But we are doing a request and this requires both the 
services and hence db of each service will start a transaction but these transactions are occuring independently.
If the trasaction is failing in one service and passing in another service then we can roll back them easily how we 
would do it conventionally.


Phases of the microservices architecture:
Decomposing:It is decided based on the buisness logic or through the subdomains(DDD -Domain Driven Design)
Database:Each service can have its own database or we could have a shared database for all the services that we have.

Integration:We can do integration using API gateway.
